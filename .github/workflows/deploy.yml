name: Deploy Microservice  

on:  
  push:  
    branches:  
      - main  

jobs:  
  build:  
    runs-on: ubuntu-latest  
    steps:  
      - uses: actions/checkout@v3  
      
      - name: Configure AWS Credentials  
        uses: aws-actions/configure-aws-credentials@v1  
        with:  
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Check and Delete Secrets Manager Secret
        run: |
               SECRET_NAME="wordpress-db-password"
               if aws secretsmanager describe-secret --secret-id $SECRET_NAME --region ap-south-1 2>/dev/null; then
                 echo "Secret $SECRET_NAME exists, checking deletion status..."
                 if aws secretsmanager describe-secret --secret-id $SECRET_NAME --region ap-south-1 | grep -q '"DeletedDate"'; then
                   echo "Secret is scheduled for deletion, force deleting..."
                   aws secretsmanager delete-secret --secret-id $SECRET_NAME --force-delete-without-recovery --region ap-south-1
                   echo "Secret $SECRET_NAME force deleted."
                 fi
               else
                 echo "Secret $SECRET_NAME does not exist, proceeding."
               fi

      - name: Login to Amazon ECR  
        uses: aws-actions/amazon-ecr-login@v1  
      
      - name: Build, tag, and push image to Amazon ECR  
        run: |  
          cd microservice  
          docker build -t microservice:latest .  
          docker tag microservice:latest ${{ secrets.ECR_REGISTRY }}/microservice:latest  
          docker push ${{ secrets.ECR_REGISTRY }}/microservice:latest  
      
      - name: Setup Terraform  
        uses: hashicorp/setup-terraform@v2  
        with:  
          terraform_version: latest

      - name: checking terraform version
        run: terraform version
      
      - name: boostrap
        run : cd boostrap && terraform init

      - name: validate
        run: cd boostrap ; terraform validate && cd boostrap; terraform plan
        env: 
             AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
             AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             aws-region: ${{ secrets.AWS_REGION }}

      - name : apply terraform file for s3 bucket creation
        run: terraform apply --auto-approve
        env: 
            AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}


      - name: Terraform init  
        run: cd terraform && terraform init

      - name: Terraform Validate
        run: cd terraform && terraform validate

      - name: Terraform plan
        id: plan
        run: |
          cd terraform && terraform plan -no-color -input=false -out=tfplan
          echo "changes=$(terraform show -no-color tfplan | grep -q 'No changes.' && echo 'false' || echo 'true')" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          TF_VAR_hosted_zone_id: ${{ secrets.TF_VAR_hosted_zone_id }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}

      - name: Terraform refresh
        run: terraform refresh

      - name: Terraform Apply
        run: cd terraform && terraform apply --auto-approve
        if: steps.plan.outputs.changes == 'true'
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}
          TF_VAR_hosted_zone_id: ${{ secrets.TF_VAR_hosted_zone_id }}

      - name: Deploy to ECS  
        run: |  
          aws ecs update-service --cluster cloudzenia-ecs --service microservice-service --force-new-deployment  
        env:  
          AWS_REGION: ${{ secrets.AWS_REGION }}
      
